// Generated by cpp11: do not edit by hand
// clang-format off


#include "cpp11/declarations.hpp"

// duration.cpp
cpp11::writable::strings format_duration_cpp(cpp11::list_of<cpp11::integers> fields, const cpp11::strings& precision_string);
extern "C" SEXP _clock_format_duration_cpp(SEXP fields, SEXP precision_string) {
  BEGIN_CPP11
    return cpp11::as_sexp(format_duration_cpp(cpp11::as_cpp<cpp11::decay_t<cpp11::list_of<cpp11::integers>>>(fields), cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(precision_string)));
  END_CPP11
}
// duration.cpp
cpp11::writable::list_of<cpp11::writable::integers> duration_helper_cpp(const cpp11::integers& n, const cpp11::strings& precision_string);
extern "C" SEXP _clock_duration_helper_cpp(SEXP n, SEXP precision_string) {
  BEGIN_CPP11
    return cpp11::as_sexp(duration_helper_cpp(cpp11::as_cpp<cpp11::decay_t<const cpp11::integers&>>(n), cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(precision_string)));
  END_CPP11
}
// duration.cpp
cpp11::writable::list duration_cast_cpp(cpp11::list_of<cpp11::integers> fields, const cpp11::strings& precision_from, const cpp11::strings& precision_to);
extern "C" SEXP _clock_duration_cast_cpp(SEXP fields, SEXP precision_from, SEXP precision_to) {
  BEGIN_CPP11
    return cpp11::as_sexp(duration_cast_cpp(cpp11::as_cpp<cpp11::decay_t<cpp11::list_of<cpp11::integers>>>(fields), cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(precision_from), cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(precision_to)));
  END_CPP11
}
// duration.cpp
cpp11::writable::list duration_plus_cpp(cpp11::list_of<cpp11::integers> x, cpp11::list_of<cpp11::integers> y, const cpp11::strings& precision_x, const cpp11::strings& precision_y);
extern "C" SEXP _clock_duration_plus_cpp(SEXP x, SEXP y, SEXP precision_x, SEXP precision_y) {
  BEGIN_CPP11
    return cpp11::as_sexp(duration_plus_cpp(cpp11::as_cpp<cpp11::decay_t<cpp11::list_of<cpp11::integers>>>(x), cpp11::as_cpp<cpp11::decay_t<cpp11::list_of<cpp11::integers>>>(y), cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(precision_x), cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(precision_y)));
  END_CPP11
}
// duration.cpp
cpp11::writable::list duration_minus_cpp(cpp11::list_of<cpp11::integers> x, cpp11::list_of<cpp11::integers> y, const cpp11::strings& precision_x, const cpp11::strings& precision_y);
extern "C" SEXP _clock_duration_minus_cpp(SEXP x, SEXP y, SEXP precision_x, SEXP precision_y) {
  BEGIN_CPP11
    return cpp11::as_sexp(duration_minus_cpp(cpp11::as_cpp<cpp11::decay_t<cpp11::list_of<cpp11::integers>>>(x), cpp11::as_cpp<cpp11::decay_t<cpp11::list_of<cpp11::integers>>>(y), cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(precision_x), cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(precision_y)));
  END_CPP11
}
// duration.cpp
cpp11::writable::strings duration_common_precision_cpp(const cpp11::strings& x_precision, const cpp11::strings& y_precision);
extern "C" SEXP _clock_duration_common_precision_cpp(SEXP x_precision, SEXP y_precision) {
  BEGIN_CPP11
    return cpp11::as_sexp(duration_common_precision_cpp(cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(x_precision), cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(y_precision)));
  END_CPP11
}
// duration.cpp
bool duration_has_common_precision_cpp(const cpp11::strings& x_precision, const cpp11::strings& y_precision);
extern "C" SEXP _clock_duration_has_common_precision_cpp(SEXP x_precision, SEXP y_precision) {
  BEGIN_CPP11
    return cpp11::as_sexp(duration_has_common_precision_cpp(cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(x_precision), cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(y_precision)));
  END_CPP11
}
// duration.cpp
cpp11::writable::list duration_floor_cpp(cpp11::list_of<cpp11::integers> fields, const cpp11::strings& precision_from, const cpp11::strings& precision_to, const int& n);
extern "C" SEXP _clock_duration_floor_cpp(SEXP fields, SEXP precision_from, SEXP precision_to, SEXP n) {
  BEGIN_CPP11
    return cpp11::as_sexp(duration_floor_cpp(cpp11::as_cpp<cpp11::decay_t<cpp11::list_of<cpp11::integers>>>(fields), cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(precision_from), cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(precision_to), cpp11::as_cpp<cpp11::decay_t<const int&>>(n)));
  END_CPP11
}
// duration.cpp
cpp11::writable::list duration_ceiling_cpp(cpp11::list_of<cpp11::integers> fields, const cpp11::strings& precision_from, const cpp11::strings& precision_to, const int& n);
extern "C" SEXP _clock_duration_ceiling_cpp(SEXP fields, SEXP precision_from, SEXP precision_to, SEXP n) {
  BEGIN_CPP11
    return cpp11::as_sexp(duration_ceiling_cpp(cpp11::as_cpp<cpp11::decay_t<cpp11::list_of<cpp11::integers>>>(fields), cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(precision_from), cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(precision_to), cpp11::as_cpp<cpp11::decay_t<const int&>>(n)));
  END_CPP11
}
// duration.cpp
cpp11::writable::list duration_round_cpp(cpp11::list_of<cpp11::integers> fields, const cpp11::strings& precision_from, const cpp11::strings& precision_to, const int& n);
extern "C" SEXP _clock_duration_round_cpp(SEXP fields, SEXP precision_from, SEXP precision_to, SEXP n) {
  BEGIN_CPP11
    return cpp11::as_sexp(duration_round_cpp(cpp11::as_cpp<cpp11::decay_t<cpp11::list_of<cpp11::integers>>>(fields), cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(precision_from), cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(precision_to), cpp11::as_cpp<cpp11::decay_t<const int&>>(n)));
  END_CPP11
}
// duration.cpp
cpp11::writable::list duration_unary_minus_cpp(cpp11::list_of<cpp11::integers> fields, const cpp11::strings& precision_string);
extern "C" SEXP _clock_duration_unary_minus_cpp(SEXP fields, SEXP precision_string) {
  BEGIN_CPP11
    return cpp11::as_sexp(duration_unary_minus_cpp(cpp11::as_cpp<cpp11::decay_t<cpp11::list_of<cpp11::integers>>>(fields), cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(precision_string)));
  END_CPP11
}
// format.cpp
cpp11::writable::strings format_time_point_cpp(cpp11::list_of<cpp11::integers> fields, const cpp11::strings& clock, const cpp11::strings& format, const cpp11::strings& precision_string, const cpp11::strings& mon, const cpp11::strings& mon_ab, const cpp11::strings& day, const cpp11::strings& day_ab, const cpp11::strings& am_pm, const cpp11::strings& decimal_mark);
extern "C" SEXP _clock_format_time_point_cpp(SEXP fields, SEXP clock, SEXP format, SEXP precision_string, SEXP mon, SEXP mon_ab, SEXP day, SEXP day_ab, SEXP am_pm, SEXP decimal_mark) {
  BEGIN_CPP11
    return cpp11::as_sexp(format_time_point_cpp(cpp11::as_cpp<cpp11::decay_t<cpp11::list_of<cpp11::integers>>>(fields), cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(clock), cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(format), cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(precision_string), cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(mon), cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(mon_ab), cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(day), cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(day_ab), cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(am_pm), cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(decimal_mark)));
  END_CPP11
}
// format.cpp
cpp11::writable::strings format_zoned_time_cpp(cpp11::list_of<cpp11::integers> fields, const cpp11::strings& zone, const bool& abbreviate_zone, const cpp11::strings& format, const cpp11::strings& precision_string, const cpp11::strings& mon, const cpp11::strings& mon_ab, const cpp11::strings& day, const cpp11::strings& day_ab, const cpp11::strings& am_pm, const cpp11::strings& decimal_mark);
extern "C" SEXP _clock_format_zoned_time_cpp(SEXP fields, SEXP zone, SEXP abbreviate_zone, SEXP format, SEXP precision_string, SEXP mon, SEXP mon_ab, SEXP day, SEXP day_ab, SEXP am_pm, SEXP decimal_mark) {
  BEGIN_CPP11
    return cpp11::as_sexp(format_zoned_time_cpp(cpp11::as_cpp<cpp11::decay_t<cpp11::list_of<cpp11::integers>>>(fields), cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(zone), cpp11::as_cpp<cpp11::decay_t<const bool&>>(abbreviate_zone), cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(format), cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(precision_string), cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(mon), cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(mon_ab), cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(day), cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(day_ab), cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(am_pm), cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(decimal_mark)));
  END_CPP11
}
// gregorian-year-month-day.cpp
void year_month_day_check_range_cpp(const cpp11::integers& x, const cpp11::strings& component_string, const cpp11::strings& arg);
extern "C" SEXP _clock_year_month_day_check_range_cpp(SEXP x, SEXP component_string, SEXP arg) {
  BEGIN_CPP11
    year_month_day_check_range_cpp(cpp11::as_cpp<cpp11::decay_t<const cpp11::integers&>>(x), cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(component_string), cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(arg));
    return R_NilValue;
  END_CPP11
}
// gregorian-year-month-day.cpp
cpp11::writable::list collect_year_month_day_fields(cpp11::list_of<cpp11::integers> fields, const cpp11::strings& precision_string);
extern "C" SEXP _clock_collect_year_month_day_fields(SEXP fields, SEXP precision_string) {
  BEGIN_CPP11
    return cpp11::as_sexp(collect_year_month_day_fields(cpp11::as_cpp<cpp11::decay_t<cpp11::list_of<cpp11::integers>>>(fields), cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(precision_string)));
  END_CPP11
}
// gregorian-year-month-day.cpp
cpp11::writable::strings format_year_month_day_cpp(cpp11::list_of<cpp11::integers> fields, const cpp11::strings& precision_string);
extern "C" SEXP _clock_format_year_month_day_cpp(SEXP fields, SEXP precision_string) {
  BEGIN_CPP11
    return cpp11::as_sexp(format_year_month_day_cpp(cpp11::as_cpp<cpp11::decay_t<cpp11::list_of<cpp11::integers>>>(fields), cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(precision_string)));
  END_CPP11
}
// gregorian-year-month-day.cpp
cpp11::writable::logicals invalid_detect_year_month_day_cpp(cpp11::list_of<cpp11::integers> fields, const cpp11::strings& precision_string);
extern "C" SEXP _clock_invalid_detect_year_month_day_cpp(SEXP fields, SEXP precision_string) {
  BEGIN_CPP11
    return cpp11::as_sexp(invalid_detect_year_month_day_cpp(cpp11::as_cpp<cpp11::decay_t<cpp11::list_of<cpp11::integers>>>(fields), cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(precision_string)));
  END_CPP11
}
// gregorian-year-month-day.cpp
bool invalid_any_year_month_day_cpp(cpp11::list_of<cpp11::integers> fields, const cpp11::strings& precision_string);
extern "C" SEXP _clock_invalid_any_year_month_day_cpp(SEXP fields, SEXP precision_string) {
  BEGIN_CPP11
    return cpp11::as_sexp(invalid_any_year_month_day_cpp(cpp11::as_cpp<cpp11::decay_t<cpp11::list_of<cpp11::integers>>>(fields), cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(precision_string)));
  END_CPP11
}
// gregorian-year-month-day.cpp
int invalid_count_year_month_day_cpp(cpp11::list_of<cpp11::integers> fields, const cpp11::strings& precision_string);
extern "C" SEXP _clock_invalid_count_year_month_day_cpp(SEXP fields, SEXP precision_string) {
  BEGIN_CPP11
    return cpp11::as_sexp(invalid_count_year_month_day_cpp(cpp11::as_cpp<cpp11::decay_t<cpp11::list_of<cpp11::integers>>>(fields), cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(precision_string)));
  END_CPP11
}
// gregorian-year-month-day.cpp
cpp11::writable::list invalid_resolve_year_month_day_cpp(cpp11::list_of<cpp11::integers> fields, const cpp11::strings& precision_string, const cpp11::strings& invalid_string);
extern "C" SEXP _clock_invalid_resolve_year_month_day_cpp(SEXP fields, SEXP precision_string, SEXP invalid_string) {
  BEGIN_CPP11
    return cpp11::as_sexp(invalid_resolve_year_month_day_cpp(cpp11::as_cpp<cpp11::decay_t<cpp11::list_of<cpp11::integers>>>(fields), cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(precision_string), cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(invalid_string)));
  END_CPP11
}
// gregorian-year-month-day.cpp
cpp11::writable::list set_field_year_month_day_cpp(cpp11::list_of<cpp11::integers> fields, const cpp11::integers& value, const cpp11::strings& precision_fields, const cpp11::strings& precision_value);
extern "C" SEXP _clock_set_field_year_month_day_cpp(SEXP fields, SEXP value, SEXP precision_fields, SEXP precision_value) {
  BEGIN_CPP11
    return cpp11::as_sexp(set_field_year_month_day_cpp(cpp11::as_cpp<cpp11::decay_t<cpp11::list_of<cpp11::integers>>>(fields), cpp11::as_cpp<cpp11::decay_t<const cpp11::integers&>>(value), cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(precision_fields), cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(precision_value)));
  END_CPP11
}
// gregorian-year-month-day.cpp
cpp11::writable::list set_field_year_month_day_last_cpp(cpp11::list_of<cpp11::integers> fields, const cpp11::strings& precision_fields);
extern "C" SEXP _clock_set_field_year_month_day_last_cpp(SEXP fields, SEXP precision_fields) {
  BEGIN_CPP11
    return cpp11::as_sexp(set_field_year_month_day_last_cpp(cpp11::as_cpp<cpp11::decay_t<cpp11::list_of<cpp11::integers>>>(fields), cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(precision_fields)));
  END_CPP11
}
// gregorian-year-month-day.cpp
cpp11::writable::list year_month_day_plus_duration_cpp(cpp11::list_of<cpp11::integers> fields, cpp11::list_of<cpp11::integers> fields_n, const cpp11::strings& precision_fields, const cpp11::strings& precision_n);
extern "C" SEXP _clock_year_month_day_plus_duration_cpp(SEXP fields, SEXP fields_n, SEXP precision_fields, SEXP precision_n) {
  BEGIN_CPP11
    return cpp11::as_sexp(year_month_day_plus_duration_cpp(cpp11::as_cpp<cpp11::decay_t<cpp11::list_of<cpp11::integers>>>(fields), cpp11::as_cpp<cpp11::decay_t<cpp11::list_of<cpp11::integers>>>(fields_n), cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(precision_fields), cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(precision_n)));
  END_CPP11
}
// gregorian-year-month-day.cpp
cpp11::writable::list as_sys_time_year_month_day_cpp(cpp11::list_of<cpp11::integers> fields, const cpp11::strings& precision_string);
extern "C" SEXP _clock_as_sys_time_year_month_day_cpp(SEXP fields, SEXP precision_string) {
  BEGIN_CPP11
    return cpp11::as_sexp(as_sys_time_year_month_day_cpp(cpp11::as_cpp<cpp11::decay_t<cpp11::list_of<cpp11::integers>>>(fields), cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(precision_string)));
  END_CPP11
}
// gregorian-year-month-day.cpp
cpp11::writable::list as_year_month_day_from_sys_time_cpp(cpp11::list_of<cpp11::integers> fields, const cpp11::strings& precision_string);
extern "C" SEXP _clock_as_year_month_day_from_sys_time_cpp(SEXP fields, SEXP precision_string) {
  BEGIN_CPP11
    return cpp11::as_sexp(as_year_month_day_from_sys_time_cpp(cpp11::as_cpp<cpp11::decay_t<cpp11::list_of<cpp11::integers>>>(fields), cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(precision_string)));
  END_CPP11
}
// gregorian-year-month-day.cpp
cpp11::writable::list year_month_day_minus_year_month_day_cpp(cpp11::list_of<cpp11::integers> x, cpp11::list_of<cpp11::integers> y, const cpp11::strings& precision_string);
extern "C" SEXP _clock_year_month_day_minus_year_month_day_cpp(SEXP x, SEXP y, SEXP precision_string) {
  BEGIN_CPP11
    return cpp11::as_sexp(year_month_day_minus_year_month_day_cpp(cpp11::as_cpp<cpp11::decay_t<cpp11::list_of<cpp11::integers>>>(x), cpp11::as_cpp<cpp11::decay_t<cpp11::list_of<cpp11::integers>>>(y), cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(precision_string)));
  END_CPP11
}
// gregorian-year-month-weekday.cpp
void year_month_weekday_check_range_cpp(const cpp11::integers& x, const cpp11::strings& component_string, const cpp11::strings& arg);
extern "C" SEXP _clock_year_month_weekday_check_range_cpp(SEXP x, SEXP component_string, SEXP arg) {
  BEGIN_CPP11
    year_month_weekday_check_range_cpp(cpp11::as_cpp<cpp11::decay_t<const cpp11::integers&>>(x), cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(component_string), cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(arg));
    return R_NilValue;
  END_CPP11
}
// gregorian-year-month-weekday.cpp
cpp11::writable::list collect_year_month_weekday_fields(cpp11::list_of<cpp11::integers> fields, const cpp11::strings& precision_string);
extern "C" SEXP _clock_collect_year_month_weekday_fields(SEXP fields, SEXP precision_string) {
  BEGIN_CPP11
    return cpp11::as_sexp(collect_year_month_weekday_fields(cpp11::as_cpp<cpp11::decay_t<cpp11::list_of<cpp11::integers>>>(fields), cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(precision_string)));
  END_CPP11
}
// gregorian-year-month-weekday.cpp
cpp11::writable::strings format_year_month_weekday_cpp(cpp11::list_of<cpp11::integers> fields, const cpp11::strings& precision_string);
extern "C" SEXP _clock_format_year_month_weekday_cpp(SEXP fields, SEXP precision_string) {
  BEGIN_CPP11
    return cpp11::as_sexp(format_year_month_weekday_cpp(cpp11::as_cpp<cpp11::decay_t<cpp11::list_of<cpp11::integers>>>(fields), cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(precision_string)));
  END_CPP11
}
// gregorian-year-month-weekday.cpp
cpp11::writable::logicals invalid_detect_year_month_weekday_cpp(cpp11::list_of<cpp11::integers> fields, const cpp11::strings& precision_string);
extern "C" SEXP _clock_invalid_detect_year_month_weekday_cpp(SEXP fields, SEXP precision_string) {
  BEGIN_CPP11
    return cpp11::as_sexp(invalid_detect_year_month_weekday_cpp(cpp11::as_cpp<cpp11::decay_t<cpp11::list_of<cpp11::integers>>>(fields), cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(precision_string)));
  END_CPP11
}
// gregorian-year-month-weekday.cpp
bool invalid_any_year_month_weekday_cpp(cpp11::list_of<cpp11::integers> fields, const cpp11::strings& precision_string);
extern "C" SEXP _clock_invalid_any_year_month_weekday_cpp(SEXP fields, SEXP precision_string) {
  BEGIN_CPP11
    return cpp11::as_sexp(invalid_any_year_month_weekday_cpp(cpp11::as_cpp<cpp11::decay_t<cpp11::list_of<cpp11::integers>>>(fields), cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(precision_string)));
  END_CPP11
}
// gregorian-year-month-weekday.cpp
int invalid_count_year_month_weekday_cpp(cpp11::list_of<cpp11::integers> fields, const cpp11::strings& precision_string);
extern "C" SEXP _clock_invalid_count_year_month_weekday_cpp(SEXP fields, SEXP precision_string) {
  BEGIN_CPP11
    return cpp11::as_sexp(invalid_count_year_month_weekday_cpp(cpp11::as_cpp<cpp11::decay_t<cpp11::list_of<cpp11::integers>>>(fields), cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(precision_string)));
  END_CPP11
}
// gregorian-year-month-weekday.cpp
cpp11::writable::list invalid_resolve_year_month_weekday_cpp(cpp11::list_of<cpp11::integers> fields, const cpp11::strings& precision_string, const cpp11::strings& invalid_string);
extern "C" SEXP _clock_invalid_resolve_year_month_weekday_cpp(SEXP fields, SEXP precision_string, SEXP invalid_string) {
  BEGIN_CPP11
    return cpp11::as_sexp(invalid_resolve_year_month_weekday_cpp(cpp11::as_cpp<cpp11::decay_t<cpp11::list_of<cpp11::integers>>>(fields), cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(precision_string), cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(invalid_string)));
  END_CPP11
}
// gregorian-year-month-weekday.cpp
cpp11::writable::list set_field_year_month_weekday_cpp(cpp11::list_of<cpp11::integers> fields, const cpp11::integers& value, const cpp11::strings& precision_fields, const cpp11::strings& component_string);
extern "C" SEXP _clock_set_field_year_month_weekday_cpp(SEXP fields, SEXP value, SEXP precision_fields, SEXP component_string) {
  BEGIN_CPP11
    return cpp11::as_sexp(set_field_year_month_weekday_cpp(cpp11::as_cpp<cpp11::decay_t<cpp11::list_of<cpp11::integers>>>(fields), cpp11::as_cpp<cpp11::decay_t<const cpp11::integers&>>(value), cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(precision_fields), cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(component_string)));
  END_CPP11
}
// gregorian-year-month-weekday.cpp
cpp11::writable::list set_field_year_month_weekday_last_cpp(cpp11::list_of<cpp11::integers> fields, const cpp11::strings& precision_fields);
extern "C" SEXP _clock_set_field_year_month_weekday_last_cpp(SEXP fields, SEXP precision_fields) {
  BEGIN_CPP11
    return cpp11::as_sexp(set_field_year_month_weekday_last_cpp(cpp11::as_cpp<cpp11::decay_t<cpp11::list_of<cpp11::integers>>>(fields), cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(precision_fields)));
  END_CPP11
}
// gregorian-year-month-weekday.cpp
cpp11::writable::list year_month_weekday_plus_duration_cpp(cpp11::list_of<cpp11::integers> fields, cpp11::list_of<cpp11::integers> fields_n, const cpp11::strings& precision_fields, const cpp11::strings& precision_n);
extern "C" SEXP _clock_year_month_weekday_plus_duration_cpp(SEXP fields, SEXP fields_n, SEXP precision_fields, SEXP precision_n) {
  BEGIN_CPP11
    return cpp11::as_sexp(year_month_weekday_plus_duration_cpp(cpp11::as_cpp<cpp11::decay_t<cpp11::list_of<cpp11::integers>>>(fields), cpp11::as_cpp<cpp11::decay_t<cpp11::list_of<cpp11::integers>>>(fields_n), cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(precision_fields), cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(precision_n)));
  END_CPP11
}
// gregorian-year-month-weekday.cpp
cpp11::writable::list as_sys_time_year_month_weekday_cpp(cpp11::list_of<cpp11::integers> fields, const cpp11::strings& precision_string);
extern "C" SEXP _clock_as_sys_time_year_month_weekday_cpp(SEXP fields, SEXP precision_string) {
  BEGIN_CPP11
    return cpp11::as_sexp(as_sys_time_year_month_weekday_cpp(cpp11::as_cpp<cpp11::decay_t<cpp11::list_of<cpp11::integers>>>(fields), cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(precision_string)));
  END_CPP11
}
// gregorian-year-month-weekday.cpp
cpp11::writable::list as_year_month_weekday_from_sys_time_cpp(cpp11::list_of<cpp11::integers> fields, const cpp11::strings& precision_string);
extern "C" SEXP _clock_as_year_month_weekday_from_sys_time_cpp(SEXP fields, SEXP precision_string) {
  BEGIN_CPP11
    return cpp11::as_sexp(as_year_month_weekday_from_sys_time_cpp(cpp11::as_cpp<cpp11::decay_t<cpp11::list_of<cpp11::integers>>>(fields), cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(precision_string)));
  END_CPP11
}
// gregorian-year-month-weekday.cpp
cpp11::writable::list year_month_weekday_minus_year_month_weekday_cpp(cpp11::list_of<cpp11::integers> x, cpp11::list_of<cpp11::integers> y, const cpp11::strings& precision_string);
extern "C" SEXP _clock_year_month_weekday_minus_year_month_weekday_cpp(SEXP x, SEXP y, SEXP precision_string) {
  BEGIN_CPP11
    return cpp11::as_sexp(year_month_weekday_minus_year_month_weekday_cpp(cpp11::as_cpp<cpp11::decay_t<cpp11::list_of<cpp11::integers>>>(x), cpp11::as_cpp<cpp11::decay_t<cpp11::list_of<cpp11::integers>>>(y), cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(precision_string)));
  END_CPP11
}
// install.cpp
void clock_set_install(const cpp11::strings& path);
extern "C" SEXP _clock_clock_set_install(SEXP path) {
  BEGIN_CPP11
    clock_set_install(cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(path));
    return R_NilValue;
  END_CPP11
}
// iso-year-week-day.cpp
void iso_year_week_day_check_range_cpp(const cpp11::integers& x, const cpp11::strings& component_string, const cpp11::strings& arg);
extern "C" SEXP _clock_iso_year_week_day_check_range_cpp(SEXP x, SEXP component_string, SEXP arg) {
  BEGIN_CPP11
    iso_year_week_day_check_range_cpp(cpp11::as_cpp<cpp11::decay_t<const cpp11::integers&>>(x), cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(component_string), cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(arg));
    return R_NilValue;
  END_CPP11
}
// iso-year-week-day.cpp
cpp11::writable::list collect_iso_year_week_day_fields(cpp11::list_of<cpp11::integers> fields, const cpp11::strings& precision_string);
extern "C" SEXP _clock_collect_iso_year_week_day_fields(SEXP fields, SEXP precision_string) {
  BEGIN_CPP11
    return cpp11::as_sexp(collect_iso_year_week_day_fields(cpp11::as_cpp<cpp11::decay_t<cpp11::list_of<cpp11::integers>>>(fields), cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(precision_string)));
  END_CPP11
}
// iso-year-week-day.cpp
cpp11::writable::strings format_iso_year_week_day_cpp(cpp11::list_of<cpp11::integers> fields, const cpp11::strings& precision_string);
extern "C" SEXP _clock_format_iso_year_week_day_cpp(SEXP fields, SEXP precision_string) {
  BEGIN_CPP11
    return cpp11::as_sexp(format_iso_year_week_day_cpp(cpp11::as_cpp<cpp11::decay_t<cpp11::list_of<cpp11::integers>>>(fields), cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(precision_string)));
  END_CPP11
}
// iso-year-week-day.cpp
cpp11::writable::logicals invalid_detect_iso_year_week_day_cpp(cpp11::list_of<cpp11::integers> fields, const cpp11::strings& precision_string);
extern "C" SEXP _clock_invalid_detect_iso_year_week_day_cpp(SEXP fields, SEXP precision_string) {
  BEGIN_CPP11
    return cpp11::as_sexp(invalid_detect_iso_year_week_day_cpp(cpp11::as_cpp<cpp11::decay_t<cpp11::list_of<cpp11::integers>>>(fields), cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(precision_string)));
  END_CPP11
}
// iso-year-week-day.cpp
bool invalid_any_iso_year_week_day_cpp(cpp11::list_of<cpp11::integers> fields, const cpp11::strings& precision_string);
extern "C" SEXP _clock_invalid_any_iso_year_week_day_cpp(SEXP fields, SEXP precision_string) {
  BEGIN_CPP11
    return cpp11::as_sexp(invalid_any_iso_year_week_day_cpp(cpp11::as_cpp<cpp11::decay_t<cpp11::list_of<cpp11::integers>>>(fields), cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(precision_string)));
  END_CPP11
}
// iso-year-week-day.cpp
int invalid_count_iso_year_week_day_cpp(cpp11::list_of<cpp11::integers> fields, const cpp11::strings& precision_string);
extern "C" SEXP _clock_invalid_count_iso_year_week_day_cpp(SEXP fields, SEXP precision_string) {
  BEGIN_CPP11
    return cpp11::as_sexp(invalid_count_iso_year_week_day_cpp(cpp11::as_cpp<cpp11::decay_t<cpp11::list_of<cpp11::integers>>>(fields), cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(precision_string)));
  END_CPP11
}
// iso-year-week-day.cpp
cpp11::writable::list invalid_resolve_iso_year_week_day_cpp(cpp11::list_of<cpp11::integers> fields, const cpp11::strings& precision_string, const cpp11::strings& invalid_string);
extern "C" SEXP _clock_invalid_resolve_iso_year_week_day_cpp(SEXP fields, SEXP precision_string, SEXP invalid_string) {
  BEGIN_CPP11
    return cpp11::as_sexp(invalid_resolve_iso_year_week_day_cpp(cpp11::as_cpp<cpp11::decay_t<cpp11::list_of<cpp11::integers>>>(fields), cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(precision_string), cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(invalid_string)));
  END_CPP11
}
// iso-year-week-day.cpp
cpp11::writable::list set_field_iso_year_week_day_cpp(cpp11::list_of<cpp11::integers> fields, const cpp11::integers& value, const cpp11::strings& precision_fields, const cpp11::strings& precision_value);
extern "C" SEXP _clock_set_field_iso_year_week_day_cpp(SEXP fields, SEXP value, SEXP precision_fields, SEXP precision_value) {
  BEGIN_CPP11
    return cpp11::as_sexp(set_field_iso_year_week_day_cpp(cpp11::as_cpp<cpp11::decay_t<cpp11::list_of<cpp11::integers>>>(fields), cpp11::as_cpp<cpp11::decay_t<const cpp11::integers&>>(value), cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(precision_fields), cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(precision_value)));
  END_CPP11
}
// iso-year-week-day.cpp
cpp11::writable::list set_field_iso_year_week_day_last_cpp(cpp11::list_of<cpp11::integers> fields, const cpp11::strings& precision_fields);
extern "C" SEXP _clock_set_field_iso_year_week_day_last_cpp(SEXP fields, SEXP precision_fields) {
  BEGIN_CPP11
    return cpp11::as_sexp(set_field_iso_year_week_day_last_cpp(cpp11::as_cpp<cpp11::decay_t<cpp11::list_of<cpp11::integers>>>(fields), cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(precision_fields)));
  END_CPP11
}
// iso-year-week-day.cpp
cpp11::writable::list iso_year_week_day_plus_duration_cpp(cpp11::list_of<cpp11::integers> fields, cpp11::list_of<cpp11::integers> fields_n, const cpp11::strings& precision_fields, const cpp11::strings& precision_n);
extern "C" SEXP _clock_iso_year_week_day_plus_duration_cpp(SEXP fields, SEXP fields_n, SEXP precision_fields, SEXP precision_n) {
  BEGIN_CPP11
    return cpp11::as_sexp(iso_year_week_day_plus_duration_cpp(cpp11::as_cpp<cpp11::decay_t<cpp11::list_of<cpp11::integers>>>(fields), cpp11::as_cpp<cpp11::decay_t<cpp11::list_of<cpp11::integers>>>(fields_n), cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(precision_fields), cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(precision_n)));
  END_CPP11
}
// iso-year-week-day.cpp
cpp11::writable::list as_sys_time_iso_year_week_day_cpp(cpp11::list_of<cpp11::integers> fields, const cpp11::strings& precision_string);
extern "C" SEXP _clock_as_sys_time_iso_year_week_day_cpp(SEXP fields, SEXP precision_string) {
  BEGIN_CPP11
    return cpp11::as_sexp(as_sys_time_iso_year_week_day_cpp(cpp11::as_cpp<cpp11::decay_t<cpp11::list_of<cpp11::integers>>>(fields), cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(precision_string)));
  END_CPP11
}
// iso-year-week-day.cpp
cpp11::writable::list as_iso_year_week_day_from_sys_time_cpp(cpp11::list_of<cpp11::integers> fields, const cpp11::strings& precision_string);
extern "C" SEXP _clock_as_iso_year_week_day_from_sys_time_cpp(SEXP fields, SEXP precision_string) {
  BEGIN_CPP11
    return cpp11::as_sexp(as_iso_year_week_day_from_sys_time_cpp(cpp11::as_cpp<cpp11::decay_t<cpp11::list_of<cpp11::integers>>>(fields), cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(precision_string)));
  END_CPP11
}
// iso-year-week-day.cpp
cpp11::writable::list iso_year_week_day_minus_iso_year_week_day_cpp(cpp11::list_of<cpp11::integers> x, cpp11::list_of<cpp11::integers> y, const cpp11::strings& precision_string);
extern "C" SEXP _clock_iso_year_week_day_minus_iso_year_week_day_cpp(SEXP x, SEXP y, SEXP precision_string) {
  BEGIN_CPP11
    return cpp11::as_sexp(iso_year_week_day_minus_iso_year_week_day_cpp(cpp11::as_cpp<cpp11::decay_t<cpp11::list_of<cpp11::integers>>>(x), cpp11::as_cpp<cpp11::decay_t<cpp11::list_of<cpp11::integers>>>(y), cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(precision_string)));
  END_CPP11
}
// quarterly-year-quarter-day.cpp
void year_quarter_day_check_range_cpp(const cpp11::integers& x, const cpp11::strings& component_string, const cpp11::strings& arg);
extern "C" SEXP _clock_year_quarter_day_check_range_cpp(SEXP x, SEXP component_string, SEXP arg) {
  BEGIN_CPP11
    year_quarter_day_check_range_cpp(cpp11::as_cpp<cpp11::decay_t<const cpp11::integers&>>(x), cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(component_string), cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(arg));
    return R_NilValue;
  END_CPP11
}
// quarterly-year-quarter-day.cpp
cpp11::writable::list collect_year_quarter_day_fields(cpp11::list_of<cpp11::integers> fields, const cpp11::strings& precision_string, const cpp11::integers& start_int);
extern "C" SEXP _clock_collect_year_quarter_day_fields(SEXP fields, SEXP precision_string, SEXP start_int) {
  BEGIN_CPP11
    return cpp11::as_sexp(collect_year_quarter_day_fields(cpp11::as_cpp<cpp11::decay_t<cpp11::list_of<cpp11::integers>>>(fields), cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(precision_string), cpp11::as_cpp<cpp11::decay_t<const cpp11::integers&>>(start_int)));
  END_CPP11
}
// quarterly-year-quarter-day.cpp
cpp11::writable::strings format_year_quarter_day_cpp(cpp11::list_of<cpp11::integers> fields, const cpp11::strings& precision_string, const cpp11::integers& start_int);
extern "C" SEXP _clock_format_year_quarter_day_cpp(SEXP fields, SEXP precision_string, SEXP start_int) {
  BEGIN_CPP11
    return cpp11::as_sexp(format_year_quarter_day_cpp(cpp11::as_cpp<cpp11::decay_t<cpp11::list_of<cpp11::integers>>>(fields), cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(precision_string), cpp11::as_cpp<cpp11::decay_t<const cpp11::integers&>>(start_int)));
  END_CPP11
}
// quarterly-year-quarter-day.cpp
cpp11::writable::logicals invalid_detect_year_quarter_day_cpp(cpp11::list_of<cpp11::integers> fields, const cpp11::strings& precision_string, const cpp11::integers& start_int);
extern "C" SEXP _clock_invalid_detect_year_quarter_day_cpp(SEXP fields, SEXP precision_string, SEXP start_int) {
  BEGIN_CPP11
    return cpp11::as_sexp(invalid_detect_year_quarter_day_cpp(cpp11::as_cpp<cpp11::decay_t<cpp11::list_of<cpp11::integers>>>(fields), cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(precision_string), cpp11::as_cpp<cpp11::decay_t<const cpp11::integers&>>(start_int)));
  END_CPP11
}
// quarterly-year-quarter-day.cpp
bool invalid_any_year_quarter_day_cpp(cpp11::list_of<cpp11::integers> fields, const cpp11::strings& precision_string, const cpp11::integers& start_int);
extern "C" SEXP _clock_invalid_any_year_quarter_day_cpp(SEXP fields, SEXP precision_string, SEXP start_int) {
  BEGIN_CPP11
    return cpp11::as_sexp(invalid_any_year_quarter_day_cpp(cpp11::as_cpp<cpp11::decay_t<cpp11::list_of<cpp11::integers>>>(fields), cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(precision_string), cpp11::as_cpp<cpp11::decay_t<const cpp11::integers&>>(start_int)));
  END_CPP11
}
// quarterly-year-quarter-day.cpp
int invalid_count_year_quarter_day_cpp(cpp11::list_of<cpp11::integers> fields, const cpp11::strings& precision_string, const cpp11::integers& start_int);
extern "C" SEXP _clock_invalid_count_year_quarter_day_cpp(SEXP fields, SEXP precision_string, SEXP start_int) {
  BEGIN_CPP11
    return cpp11::as_sexp(invalid_count_year_quarter_day_cpp(cpp11::as_cpp<cpp11::decay_t<cpp11::list_of<cpp11::integers>>>(fields), cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(precision_string), cpp11::as_cpp<cpp11::decay_t<const cpp11::integers&>>(start_int)));
  END_CPP11
}
// quarterly-year-quarter-day.cpp
cpp11::writable::list invalid_resolve_year_quarter_day_cpp(cpp11::list_of<cpp11::integers> fields, const cpp11::strings& precision_string, const cpp11::integers& start_int, const cpp11::strings& invalid_string);
extern "C" SEXP _clock_invalid_resolve_year_quarter_day_cpp(SEXP fields, SEXP precision_string, SEXP start_int, SEXP invalid_string) {
  BEGIN_CPP11
    return cpp11::as_sexp(invalid_resolve_year_quarter_day_cpp(cpp11::as_cpp<cpp11::decay_t<cpp11::list_of<cpp11::integers>>>(fields), cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(precision_string), cpp11::as_cpp<cpp11::decay_t<const cpp11::integers&>>(start_int), cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(invalid_string)));
  END_CPP11
}
// quarterly-year-quarter-day.cpp
cpp11::writable::list set_field_year_quarter_day_cpp(cpp11::list_of<cpp11::integers> fields, const cpp11::integers& value, const cpp11::strings& precision_fields, const cpp11::strings& precision_value, const cpp11::integers& start_int);
extern "C" SEXP _clock_set_field_year_quarter_day_cpp(SEXP fields, SEXP value, SEXP precision_fields, SEXP precision_value, SEXP start_int) {
  BEGIN_CPP11
    return cpp11::as_sexp(set_field_year_quarter_day_cpp(cpp11::as_cpp<cpp11::decay_t<cpp11::list_of<cpp11::integers>>>(fields), cpp11::as_cpp<cpp11::decay_t<const cpp11::integers&>>(value), cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(precision_fields), cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(precision_value), cpp11::as_cpp<cpp11::decay_t<const cpp11::integers&>>(start_int)));
  END_CPP11
}
// quarterly-year-quarter-day.cpp
cpp11::writable::list set_field_year_quarter_day_last_cpp(cpp11::list_of<cpp11::integers> fields, const cpp11::strings& precision_fields, const cpp11::integers& start_int);
extern "C" SEXP _clock_set_field_year_quarter_day_last_cpp(SEXP fields, SEXP precision_fields, SEXP start_int) {
  BEGIN_CPP11
    return cpp11::as_sexp(set_field_year_quarter_day_last_cpp(cpp11::as_cpp<cpp11::decay_t<cpp11::list_of<cpp11::integers>>>(fields), cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(precision_fields), cpp11::as_cpp<cpp11::decay_t<const cpp11::integers&>>(start_int)));
  END_CPP11
}
// quarterly-year-quarter-day.cpp
cpp11::writable::list year_quarter_day_plus_duration_cpp(cpp11::list_of<cpp11::integers> fields, cpp11::list_of<cpp11::integers> fields_n, const cpp11::strings& precision_fields, const cpp11::strings& precision_n, const cpp11::integers& start_int);
extern "C" SEXP _clock_year_quarter_day_plus_duration_cpp(SEXP fields, SEXP fields_n, SEXP precision_fields, SEXP precision_n, SEXP start_int) {
  BEGIN_CPP11
    return cpp11::as_sexp(year_quarter_day_plus_duration_cpp(cpp11::as_cpp<cpp11::decay_t<cpp11::list_of<cpp11::integers>>>(fields), cpp11::as_cpp<cpp11::decay_t<cpp11::list_of<cpp11::integers>>>(fields_n), cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(precision_fields), cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(precision_n), cpp11::as_cpp<cpp11::decay_t<const cpp11::integers&>>(start_int)));
  END_CPP11
}
// quarterly-year-quarter-day.cpp
cpp11::writable::list as_sys_time_year_quarter_day_cpp(cpp11::list_of<cpp11::integers> fields, const cpp11::strings& precision_string, const cpp11::integers& start_int);
extern "C" SEXP _clock_as_sys_time_year_quarter_day_cpp(SEXP fields, SEXP precision_string, SEXP start_int) {
  BEGIN_CPP11
    return cpp11::as_sexp(as_sys_time_year_quarter_day_cpp(cpp11::as_cpp<cpp11::decay_t<cpp11::list_of<cpp11::integers>>>(fields), cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(precision_string), cpp11::as_cpp<cpp11::decay_t<const cpp11::integers&>>(start_int)));
  END_CPP11
}
// quarterly-year-quarter-day.cpp
cpp11::writable::list as_year_quarter_day_from_sys_time_cpp(cpp11::list_of<cpp11::integers> fields, const cpp11::strings& precision_string, const cpp11::integers& start_int);
extern "C" SEXP _clock_as_year_quarter_day_from_sys_time_cpp(SEXP fields, SEXP precision_string, SEXP start_int) {
  BEGIN_CPP11
    return cpp11::as_sexp(as_year_quarter_day_from_sys_time_cpp(cpp11::as_cpp<cpp11::decay_t<cpp11::list_of<cpp11::integers>>>(fields), cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(precision_string), cpp11::as_cpp<cpp11::decay_t<const cpp11::integers&>>(start_int)));
  END_CPP11
}
// quarterly-year-quarter-day.cpp
cpp11::writable::list year_quarter_day_minus_year_quarter_day_cpp(cpp11::list_of<cpp11::integers> x, cpp11::list_of<cpp11::integers> y, const cpp11::strings& precision_string, const cpp11::integers& start_int);
extern "C" SEXP _clock_year_quarter_day_minus_year_quarter_day_cpp(SEXP x, SEXP y, SEXP precision_string, SEXP start_int) {
  BEGIN_CPP11
    return cpp11::as_sexp(year_quarter_day_minus_year_quarter_day_cpp(cpp11::as_cpp<cpp11::decay_t<cpp11::list_of<cpp11::integers>>>(x), cpp11::as_cpp<cpp11::decay_t<cpp11::list_of<cpp11::integers>>>(y), cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(precision_string), cpp11::as_cpp<cpp11::decay_t<const cpp11::integers&>>(start_int)));
  END_CPP11
}
// sys-time.cpp
cpp11::writable::list sys_now_cpp();
extern "C" SEXP _clock_sys_now_cpp() {
  BEGIN_CPP11
    return cpp11::as_sexp(sys_now_cpp());
  END_CPP11
}
// weekday.cpp
cpp11::writable::integers weekday_add_days_cpp(const cpp11::integers& x, cpp11::list_of<cpp11::integers> n);
extern "C" SEXP _clock_weekday_add_days_cpp(SEXP x, SEXP n) {
  BEGIN_CPP11
    return cpp11::as_sexp(weekday_add_days_cpp(cpp11::as_cpp<cpp11::decay_t<const cpp11::integers&>>(x), cpp11::as_cpp<cpp11::decay_t<cpp11::list_of<cpp11::integers>>>(n)));
  END_CPP11
}
// weekday.cpp
cpp11::writable::list weekday_minus_weekday_cpp(const cpp11::integers& x, const cpp11::integers& y);
extern "C" SEXP _clock_weekday_minus_weekday_cpp(SEXP x, SEXP y) {
  BEGIN_CPP11
    return cpp11::as_sexp(weekday_minus_weekday_cpp(cpp11::as_cpp<cpp11::decay_t<const cpp11::integers&>>(x), cpp11::as_cpp<cpp11::decay_t<const cpp11::integers&>>(y)));
  END_CPP11
}
// weekday.cpp
cpp11::writable::integers weekday_from_time_point_cpp(cpp11::list_of<cpp11::integers> x);
extern "C" SEXP _clock_weekday_from_time_point_cpp(SEXP x) {
  BEGIN_CPP11
    return cpp11::as_sexp(weekday_from_time_point_cpp(cpp11::as_cpp<cpp11::decay_t<cpp11::list_of<cpp11::integers>>>(x)));
  END_CPP11
}
// weekday.cpp
cpp11::writable::strings format_weekday_cpp(const cpp11::integers& x, const cpp11::strings& day_ab);
extern "C" SEXP _clock_format_weekday_cpp(SEXP x, SEXP day_ab) {
  BEGIN_CPP11
    return cpp11::as_sexp(format_weekday_cpp(cpp11::as_cpp<cpp11::decay_t<const cpp11::integers&>>(x), cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(day_ab)));
  END_CPP11
}
// zone.cpp
cpp11::writable::strings zone_standardize(const cpp11::strings& zone);
extern "C" SEXP _clock_zone_standardize(SEXP zone) {
  BEGIN_CPP11
    return cpp11::as_sexp(zone_standardize(cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(zone)));
  END_CPP11
}
// zone.cpp
cpp11::writable::logicals zone_is_valid(const cpp11::strings& zone);
extern "C" SEXP _clock_zone_is_valid(SEXP zone) {
  BEGIN_CPP11
    return cpp11::as_sexp(zone_is_valid(cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(zone)));
  END_CPP11
}
// zone.cpp
cpp11::writable::strings zone_current();
extern "C" SEXP _clock_zone_current() {
  BEGIN_CPP11
    return cpp11::as_sexp(zone_current());
  END_CPP11
}
// zoned-time.cpp
cpp11::writable::list get_naive_time_cpp(cpp11::list_of<cpp11::integers> fields, const cpp11::strings& precision_string, const cpp11::strings& zone);
extern "C" SEXP _clock_get_naive_time_cpp(SEXP fields, SEXP precision_string, SEXP zone) {
  BEGIN_CPP11
    return cpp11::as_sexp(get_naive_time_cpp(cpp11::as_cpp<cpp11::decay_t<cpp11::list_of<cpp11::integers>>>(fields), cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(precision_string), cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(zone)));
  END_CPP11
}
// zoned-time.cpp
cpp11::writable::list as_zoned_sys_time_from_naive_time_cpp(cpp11::list_of<cpp11::integers> fields, const cpp11::strings& precision_string, const cpp11::strings& zone, const cpp11::strings& nonexistent_string, const cpp11::strings& ambiguous_string);
extern "C" SEXP _clock_as_zoned_sys_time_from_naive_time_cpp(SEXP fields, SEXP precision_string, SEXP zone, SEXP nonexistent_string, SEXP ambiguous_string) {
  BEGIN_CPP11
    return cpp11::as_sexp(as_zoned_sys_time_from_naive_time_cpp(cpp11::as_cpp<cpp11::decay_t<cpp11::list_of<cpp11::integers>>>(fields), cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(precision_string), cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(zone), cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(nonexistent_string), cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(ambiguous_string)));
  END_CPP11
}
// zoned-time.cpp
cpp11::writable::list to_sys_duration_fields_from_sys_seconds_cpp(const cpp11::doubles& seconds);
extern "C" SEXP _clock_to_sys_duration_fields_from_sys_seconds_cpp(SEXP seconds) {
  BEGIN_CPP11
    return cpp11::as_sexp(to_sys_duration_fields_from_sys_seconds_cpp(cpp11::as_cpp<cpp11::decay_t<const cpp11::doubles&>>(seconds)));
  END_CPP11
}
// zoned-time.cpp
cpp11::writable::doubles to_sys_seconds_from_sys_duration_fields_cpp(cpp11::list_of<cpp11::integers> fields);
extern "C" SEXP _clock_to_sys_seconds_from_sys_duration_fields_cpp(SEXP fields) {
  BEGIN_CPP11
    return cpp11::as_sexp(to_sys_seconds_from_sys_duration_fields_cpp(cpp11::as_cpp<cpp11::decay_t<cpp11::list_of<cpp11::integers>>>(fields)));
  END_CPP11
}
// zoned-time.cpp
cpp11::writable::integers get_offset_cpp(cpp11::list_of<cpp11::integers> fields, const cpp11::strings& precision_string, const cpp11::strings& zone);
extern "C" SEXP _clock_get_offset_cpp(SEXP fields, SEXP precision_string, SEXP zone) {
  BEGIN_CPP11
    return cpp11::as_sexp(get_offset_cpp(cpp11::as_cpp<cpp11::decay_t<cpp11::list_of<cpp11::integers>>>(fields), cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(precision_string), cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(zone)));
  END_CPP11
}

extern "C" {
/* .Call calls */
extern SEXP _clock_as_iso_year_week_day_from_sys_time_cpp(SEXP, SEXP);
extern SEXP _clock_as_sys_time_iso_year_week_day_cpp(SEXP, SEXP);
extern SEXP _clock_as_sys_time_year_month_day_cpp(SEXP, SEXP);
extern SEXP _clock_as_sys_time_year_month_weekday_cpp(SEXP, SEXP);
extern SEXP _clock_as_sys_time_year_quarter_day_cpp(SEXP, SEXP, SEXP);
extern SEXP _clock_as_year_month_day_from_sys_time_cpp(SEXP, SEXP);
extern SEXP _clock_as_year_month_weekday_from_sys_time_cpp(SEXP, SEXP);
extern SEXP _clock_as_year_quarter_day_from_sys_time_cpp(SEXP, SEXP, SEXP);
extern SEXP _clock_as_zoned_sys_time_from_naive_time_cpp(SEXP, SEXP, SEXP, SEXP, SEXP);
extern SEXP _clock_clock_set_install(SEXP);
extern SEXP _clock_collect_iso_year_week_day_fields(SEXP, SEXP);
extern SEXP _clock_collect_year_month_day_fields(SEXP, SEXP);
extern SEXP _clock_collect_year_month_weekday_fields(SEXP, SEXP);
extern SEXP _clock_collect_year_quarter_day_fields(SEXP, SEXP, SEXP);
extern SEXP _clock_duration_cast_cpp(SEXP, SEXP, SEXP);
extern SEXP _clock_duration_ceiling_cpp(SEXP, SEXP, SEXP, SEXP);
extern SEXP _clock_duration_common_precision_cpp(SEXP, SEXP);
extern SEXP _clock_duration_floor_cpp(SEXP, SEXP, SEXP, SEXP);
extern SEXP _clock_duration_has_common_precision_cpp(SEXP, SEXP);
extern SEXP _clock_duration_helper_cpp(SEXP, SEXP);
extern SEXP _clock_duration_minus_cpp(SEXP, SEXP, SEXP, SEXP);
extern SEXP _clock_duration_plus_cpp(SEXP, SEXP, SEXP, SEXP);
extern SEXP _clock_duration_round_cpp(SEXP, SEXP, SEXP, SEXP);
extern SEXP _clock_duration_unary_minus_cpp(SEXP, SEXP);
extern SEXP _clock_format_duration_cpp(SEXP, SEXP);
extern SEXP _clock_format_iso_year_week_day_cpp(SEXP, SEXP);
extern SEXP _clock_format_time_point_cpp(SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP);
extern SEXP _clock_format_weekday_cpp(SEXP, SEXP);
extern SEXP _clock_format_year_month_day_cpp(SEXP, SEXP);
extern SEXP _clock_format_year_month_weekday_cpp(SEXP, SEXP);
extern SEXP _clock_format_year_quarter_day_cpp(SEXP, SEXP, SEXP);
extern SEXP _clock_format_zoned_time_cpp(SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP);
extern SEXP _clock_get_naive_time_cpp(SEXP, SEXP, SEXP);
extern SEXP _clock_get_offset_cpp(SEXP, SEXP, SEXP);
extern SEXP _clock_invalid_any_iso_year_week_day_cpp(SEXP, SEXP);
extern SEXP _clock_invalid_any_year_month_day_cpp(SEXP, SEXP);
extern SEXP _clock_invalid_any_year_month_weekday_cpp(SEXP, SEXP);
extern SEXP _clock_invalid_any_year_quarter_day_cpp(SEXP, SEXP, SEXP);
extern SEXP _clock_invalid_count_iso_year_week_day_cpp(SEXP, SEXP);
extern SEXP _clock_invalid_count_year_month_day_cpp(SEXP, SEXP);
extern SEXP _clock_invalid_count_year_month_weekday_cpp(SEXP, SEXP);
extern SEXP _clock_invalid_count_year_quarter_day_cpp(SEXP, SEXP, SEXP);
extern SEXP _clock_invalid_detect_iso_year_week_day_cpp(SEXP, SEXP);
extern SEXP _clock_invalid_detect_year_month_day_cpp(SEXP, SEXP);
extern SEXP _clock_invalid_detect_year_month_weekday_cpp(SEXP, SEXP);
extern SEXP _clock_invalid_detect_year_quarter_day_cpp(SEXP, SEXP, SEXP);
extern SEXP _clock_invalid_resolve_iso_year_week_day_cpp(SEXP, SEXP, SEXP);
extern SEXP _clock_invalid_resolve_year_month_day_cpp(SEXP, SEXP, SEXP);
extern SEXP _clock_invalid_resolve_year_month_weekday_cpp(SEXP, SEXP, SEXP);
extern SEXP _clock_invalid_resolve_year_quarter_day_cpp(SEXP, SEXP, SEXP, SEXP);
extern SEXP _clock_iso_year_week_day_check_range_cpp(SEXP, SEXP, SEXP);
extern SEXP _clock_iso_year_week_day_minus_iso_year_week_day_cpp(SEXP, SEXP, SEXP);
extern SEXP _clock_iso_year_week_day_plus_duration_cpp(SEXP, SEXP, SEXP, SEXP);
extern SEXP _clock_set_field_iso_year_week_day_cpp(SEXP, SEXP, SEXP, SEXP);
extern SEXP _clock_set_field_iso_year_week_day_last_cpp(SEXP, SEXP);
extern SEXP _clock_set_field_year_month_day_cpp(SEXP, SEXP, SEXP, SEXP);
extern SEXP _clock_set_field_year_month_day_last_cpp(SEXP, SEXP);
extern SEXP _clock_set_field_year_month_weekday_cpp(SEXP, SEXP, SEXP, SEXP);
extern SEXP _clock_set_field_year_month_weekday_last_cpp(SEXP, SEXP);
extern SEXP _clock_set_field_year_quarter_day_cpp(SEXP, SEXP, SEXP, SEXP, SEXP);
extern SEXP _clock_set_field_year_quarter_day_last_cpp(SEXP, SEXP, SEXP);
extern SEXP _clock_sys_now_cpp();
extern SEXP _clock_to_sys_duration_fields_from_sys_seconds_cpp(SEXP);
extern SEXP _clock_to_sys_seconds_from_sys_duration_fields_cpp(SEXP);
extern SEXP _clock_weekday_add_days_cpp(SEXP, SEXP);
extern SEXP _clock_weekday_from_time_point_cpp(SEXP);
extern SEXP _clock_weekday_minus_weekday_cpp(SEXP, SEXP);
extern SEXP _clock_year_month_day_check_range_cpp(SEXP, SEXP, SEXP);
extern SEXP _clock_year_month_day_minus_year_month_day_cpp(SEXP, SEXP, SEXP);
extern SEXP _clock_year_month_day_plus_duration_cpp(SEXP, SEXP, SEXP, SEXP);
extern SEXP _clock_year_month_weekday_check_range_cpp(SEXP, SEXP, SEXP);
extern SEXP _clock_year_month_weekday_minus_year_month_weekday_cpp(SEXP, SEXP, SEXP);
extern SEXP _clock_year_month_weekday_plus_duration_cpp(SEXP, SEXP, SEXP, SEXP);
extern SEXP _clock_year_quarter_day_check_range_cpp(SEXP, SEXP, SEXP);
extern SEXP _clock_year_quarter_day_minus_year_quarter_day_cpp(SEXP, SEXP, SEXP, SEXP);
extern SEXP _clock_year_quarter_day_plus_duration_cpp(SEXP, SEXP, SEXP, SEXP, SEXP);
extern SEXP _clock_zone_current();
extern SEXP _clock_zone_is_valid(SEXP);
extern SEXP _clock_zone_standardize(SEXP);

static const R_CallMethodDef CallEntries[] = {
    {"_clock_as_iso_year_week_day_from_sys_time_cpp",          (DL_FUNC) &_clock_as_iso_year_week_day_from_sys_time_cpp,           2},
    {"_clock_as_sys_time_iso_year_week_day_cpp",               (DL_FUNC) &_clock_as_sys_time_iso_year_week_day_cpp,                2},
    {"_clock_as_sys_time_year_month_day_cpp",                  (DL_FUNC) &_clock_as_sys_time_year_month_day_cpp,                   2},
    {"_clock_as_sys_time_year_month_weekday_cpp",              (DL_FUNC) &_clock_as_sys_time_year_month_weekday_cpp,               2},
    {"_clock_as_sys_time_year_quarter_day_cpp",                (DL_FUNC) &_clock_as_sys_time_year_quarter_day_cpp,                 3},
    {"_clock_as_year_month_day_from_sys_time_cpp",             (DL_FUNC) &_clock_as_year_month_day_from_sys_time_cpp,              2},
    {"_clock_as_year_month_weekday_from_sys_time_cpp",         (DL_FUNC) &_clock_as_year_month_weekday_from_sys_time_cpp,          2},
    {"_clock_as_year_quarter_day_from_sys_time_cpp",           (DL_FUNC) &_clock_as_year_quarter_day_from_sys_time_cpp,            3},
    {"_clock_as_zoned_sys_time_from_naive_time_cpp",           (DL_FUNC) &_clock_as_zoned_sys_time_from_naive_time_cpp,            5},
    {"_clock_clock_set_install",                               (DL_FUNC) &_clock_clock_set_install,                                1},
    {"_clock_collect_iso_year_week_day_fields",                (DL_FUNC) &_clock_collect_iso_year_week_day_fields,                 2},
    {"_clock_collect_year_month_day_fields",                   (DL_FUNC) &_clock_collect_year_month_day_fields,                    2},
    {"_clock_collect_year_month_weekday_fields",               (DL_FUNC) &_clock_collect_year_month_weekday_fields,                2},
    {"_clock_collect_year_quarter_day_fields",                 (DL_FUNC) &_clock_collect_year_quarter_day_fields,                  3},
    {"_clock_duration_cast_cpp",                               (DL_FUNC) &_clock_duration_cast_cpp,                                3},
    {"_clock_duration_ceiling_cpp",                            (DL_FUNC) &_clock_duration_ceiling_cpp,                             4},
    {"_clock_duration_common_precision_cpp",                   (DL_FUNC) &_clock_duration_common_precision_cpp,                    2},
    {"_clock_duration_floor_cpp",                              (DL_FUNC) &_clock_duration_floor_cpp,                               4},
    {"_clock_duration_has_common_precision_cpp",               (DL_FUNC) &_clock_duration_has_common_precision_cpp,                2},
    {"_clock_duration_helper_cpp",                             (DL_FUNC) &_clock_duration_helper_cpp,                              2},
    {"_clock_duration_minus_cpp",                              (DL_FUNC) &_clock_duration_minus_cpp,                               4},
    {"_clock_duration_plus_cpp",                               (DL_FUNC) &_clock_duration_plus_cpp,                                4},
    {"_clock_duration_round_cpp",                              (DL_FUNC) &_clock_duration_round_cpp,                               4},
    {"_clock_duration_unary_minus_cpp",                        (DL_FUNC) &_clock_duration_unary_minus_cpp,                         2},
    {"_clock_format_duration_cpp",                             (DL_FUNC) &_clock_format_duration_cpp,                              2},
    {"_clock_format_iso_year_week_day_cpp",                    (DL_FUNC) &_clock_format_iso_year_week_day_cpp,                     2},
    {"_clock_format_time_point_cpp",                           (DL_FUNC) &_clock_format_time_point_cpp,                           10},
    {"_clock_format_weekday_cpp",                              (DL_FUNC) &_clock_format_weekday_cpp,                               2},
    {"_clock_format_year_month_day_cpp",                       (DL_FUNC) &_clock_format_year_month_day_cpp,                        2},
    {"_clock_format_year_month_weekday_cpp",                   (DL_FUNC) &_clock_format_year_month_weekday_cpp,                    2},
    {"_clock_format_year_quarter_day_cpp",                     (DL_FUNC) &_clock_format_year_quarter_day_cpp,                      3},
    {"_clock_format_zoned_time_cpp",                           (DL_FUNC) &_clock_format_zoned_time_cpp,                           11},
    {"_clock_get_naive_time_cpp",                              (DL_FUNC) &_clock_get_naive_time_cpp,                               3},
    {"_clock_get_offset_cpp",                                  (DL_FUNC) &_clock_get_offset_cpp,                                   3},
    {"_clock_invalid_any_iso_year_week_day_cpp",               (DL_FUNC) &_clock_invalid_any_iso_year_week_day_cpp,                2},
    {"_clock_invalid_any_year_month_day_cpp",                  (DL_FUNC) &_clock_invalid_any_year_month_day_cpp,                   2},
    {"_clock_invalid_any_year_month_weekday_cpp",              (DL_FUNC) &_clock_invalid_any_year_month_weekday_cpp,               2},
    {"_clock_invalid_any_year_quarter_day_cpp",                (DL_FUNC) &_clock_invalid_any_year_quarter_day_cpp,                 3},
    {"_clock_invalid_count_iso_year_week_day_cpp",             (DL_FUNC) &_clock_invalid_count_iso_year_week_day_cpp,              2},
    {"_clock_invalid_count_year_month_day_cpp",                (DL_FUNC) &_clock_invalid_count_year_month_day_cpp,                 2},
    {"_clock_invalid_count_year_month_weekday_cpp",            (DL_FUNC) &_clock_invalid_count_year_month_weekday_cpp,             2},
    {"_clock_invalid_count_year_quarter_day_cpp",              (DL_FUNC) &_clock_invalid_count_year_quarter_day_cpp,               3},
    {"_clock_invalid_detect_iso_year_week_day_cpp",            (DL_FUNC) &_clock_invalid_detect_iso_year_week_day_cpp,             2},
    {"_clock_invalid_detect_year_month_day_cpp",               (DL_FUNC) &_clock_invalid_detect_year_month_day_cpp,                2},
    {"_clock_invalid_detect_year_month_weekday_cpp",           (DL_FUNC) &_clock_invalid_detect_year_month_weekday_cpp,            2},
    {"_clock_invalid_detect_year_quarter_day_cpp",             (DL_FUNC) &_clock_invalid_detect_year_quarter_day_cpp,              3},
    {"_clock_invalid_resolve_iso_year_week_day_cpp",           (DL_FUNC) &_clock_invalid_resolve_iso_year_week_day_cpp,            3},
    {"_clock_invalid_resolve_year_month_day_cpp",              (DL_FUNC) &_clock_invalid_resolve_year_month_day_cpp,               3},
    {"_clock_invalid_resolve_year_month_weekday_cpp",          (DL_FUNC) &_clock_invalid_resolve_year_month_weekday_cpp,           3},
    {"_clock_invalid_resolve_year_quarter_day_cpp",            (DL_FUNC) &_clock_invalid_resolve_year_quarter_day_cpp,             4},
    {"_clock_iso_year_week_day_check_range_cpp",               (DL_FUNC) &_clock_iso_year_week_day_check_range_cpp,                3},
    {"_clock_iso_year_week_day_minus_iso_year_week_day_cpp",   (DL_FUNC) &_clock_iso_year_week_day_minus_iso_year_week_day_cpp,    3},
    {"_clock_iso_year_week_day_plus_duration_cpp",             (DL_FUNC) &_clock_iso_year_week_day_plus_duration_cpp,              4},
    {"_clock_set_field_iso_year_week_day_cpp",                 (DL_FUNC) &_clock_set_field_iso_year_week_day_cpp,                  4},
    {"_clock_set_field_iso_year_week_day_last_cpp",            (DL_FUNC) &_clock_set_field_iso_year_week_day_last_cpp,             2},
    {"_clock_set_field_year_month_day_cpp",                    (DL_FUNC) &_clock_set_field_year_month_day_cpp,                     4},
    {"_clock_set_field_year_month_day_last_cpp",               (DL_FUNC) &_clock_set_field_year_month_day_last_cpp,                2},
    {"_clock_set_field_year_month_weekday_cpp",                (DL_FUNC) &_clock_set_field_year_month_weekday_cpp,                 4},
    {"_clock_set_field_year_month_weekday_last_cpp",           (DL_FUNC) &_clock_set_field_year_month_weekday_last_cpp,            2},
    {"_clock_set_field_year_quarter_day_cpp",                  (DL_FUNC) &_clock_set_field_year_quarter_day_cpp,                   5},
    {"_clock_set_field_year_quarter_day_last_cpp",             (DL_FUNC) &_clock_set_field_year_quarter_day_last_cpp,              3},
    {"_clock_sys_now_cpp",                                     (DL_FUNC) &_clock_sys_now_cpp,                                      0},
    {"_clock_to_sys_duration_fields_from_sys_seconds_cpp",     (DL_FUNC) &_clock_to_sys_duration_fields_from_sys_seconds_cpp,      1},
    {"_clock_to_sys_seconds_from_sys_duration_fields_cpp",     (DL_FUNC) &_clock_to_sys_seconds_from_sys_duration_fields_cpp,      1},
    {"_clock_weekday_add_days_cpp",                            (DL_FUNC) &_clock_weekday_add_days_cpp,                             2},
    {"_clock_weekday_from_time_point_cpp",                     (DL_FUNC) &_clock_weekday_from_time_point_cpp,                      1},
    {"_clock_weekday_minus_weekday_cpp",                       (DL_FUNC) &_clock_weekday_minus_weekday_cpp,                        2},
    {"_clock_year_month_day_check_range_cpp",                  (DL_FUNC) &_clock_year_month_day_check_range_cpp,                   3},
    {"_clock_year_month_day_minus_year_month_day_cpp",         (DL_FUNC) &_clock_year_month_day_minus_year_month_day_cpp,          3},
    {"_clock_year_month_day_plus_duration_cpp",                (DL_FUNC) &_clock_year_month_day_plus_duration_cpp,                 4},
    {"_clock_year_month_weekday_check_range_cpp",              (DL_FUNC) &_clock_year_month_weekday_check_range_cpp,               3},
    {"_clock_year_month_weekday_minus_year_month_weekday_cpp", (DL_FUNC) &_clock_year_month_weekday_minus_year_month_weekday_cpp,  3},
    {"_clock_year_month_weekday_plus_duration_cpp",            (DL_FUNC) &_clock_year_month_weekday_plus_duration_cpp,             4},
    {"_clock_year_quarter_day_check_range_cpp",                (DL_FUNC) &_clock_year_quarter_day_check_range_cpp,                 3},
    {"_clock_year_quarter_day_minus_year_quarter_day_cpp",     (DL_FUNC) &_clock_year_quarter_day_minus_year_quarter_day_cpp,      4},
    {"_clock_year_quarter_day_plus_duration_cpp",              (DL_FUNC) &_clock_year_quarter_day_plus_duration_cpp,               5},
    {"_clock_zone_current",                                    (DL_FUNC) &_clock_zone_current,                                     0},
    {"_clock_zone_is_valid",                                   (DL_FUNC) &_clock_zone_is_valid,                                    1},
    {"_clock_zone_standardize",                                (DL_FUNC) &_clock_zone_standardize,                                 1},
    {NULL, NULL, 0}
};
}

extern "C" void R_init_clock(DllInfo* dll){
  R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
  R_useDynamicSymbols(dll, FALSE);
}
